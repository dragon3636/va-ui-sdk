import { OnInit, OnChanges, SimpleChanges, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DateRange, Day, AddClass, DatepickerOptions } from './models/vnlp-calendar.model';
import * as i0 from "@angular/core";
export declare class VnlpCalendarComponent implements ControlValueAccessor, OnInit, OnChanges {
    calendarContainerElement?: ElementRef;
    inputElement?: ElementRef;
    options?: DatepickerOptions;
    isOpened: boolean;
    currentOptions: DatepickerOptions;
    displayValue?: string;
    viewingDate?: Date;
    barTitle?: string;
    view?: 'days' | 'months' | 'years';
    years?: {
        year: number;
        isThisYear: boolean;
    }[];
    months?: {
        month: number;
        name: string;
        isSelected: boolean;
    }[];
    dayNames?: string[];
    days?: Day[];
    fieldId?: string;
    disabled: boolean;
    setFocus: boolean;
    private _range?;
    private onTouchedCallback;
    private onChangeCallback;
    set range(val: DateRange | undefined);
    get range(): DateRange | undefined;
    constructor();
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewChecked(): void;
    get defaultFieldId(): string;
    updateOptions(options: DatepickerOptions): void;
    nextMonth(): void;
    prevMonth(): void;
    setDate(i: number): void;
    applyChange(): void;
    setYear(i: number): void;
    setMonth(i: number): void;
    initDays(): void;
    initYears(): void;
    initMonths(): void;
    initDayNames(): void;
    toggleView(): void;
    toggle(): void;
    close(): void;
    reset(): void;
    writeValue(val: DateRange | Date | string | undefined): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    onBlur(e: MouseEvent): void;
    formatDay: (date: Date, isVisible?: boolean) => Day;
    getDayClasses(day: Day): AddClass;
    private isDateSelectable;
    private isDateSelected;
    private isInRange;
    private formatDisplay;
    private isRangeBoundary;
    private getValueToEmit;
    static ɵfac: i0.ɵɵFactoryDeclaration<VnlpCalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<VnlpCalendarComponent, "vnlp-calendar", never, { "options": "options"; "isOpened": "isOpened"; }, {}, never, ["*"], false>;
}
