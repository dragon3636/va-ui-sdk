// === DISPLAY FLEXBOX ===
// @include flex(center, center)
@mixin flex($just-content, $align-item) {
  display: flex;
  justify-content: $just-content;
  align-items: $align-item;
}

// Create typography
@mixin typography($font-size, $line-height, $font-weight) {
  font-size: $font-size;
  line-height: $line-height;
  font-weight: $font-weight;
}

// === CONVERT PXREM ===
@function strip-units($number) {
  @return calc($number / ($number * 0 + 1));
}

@function convertRootPxToEm($value) {
  // check for null:
  @if ($value == null) {
    @return $value;
  }
  // assume em:
  @if (unitless($value) or unit($value) == em) {
    @return 0em + $value;
  } @else {
    @return 0em + strip-units($value) / 16;
  }
}

@function convertPxToRem($px) {
  @return 0rem + calc(strip-units($px) / 16);
}

@mixin pxRem($property, $values) {
  // Create a couple of empty lists as output buffers:
  $px-values: ();
  $rem-values: ();

  // Ensure $values is a list.
  @if type-of($values) != 'list' {
    $values: join((), $values);
  }

  // Loop through the $values list:
  @each $value in $values {
    @if type-of($value) == number and (unitless($value) or unit($value) == px) {
      $px-values: join($px-values, 0px + ($value));
      $rem-values: join($rem-values, convertPxToRem($value));
    } @else {
      // no conversion:
      $px-values: join($px-values, $value);
      $rem-values: join($rem-values, $value);
    }
  }

  #{$property}: $px-values;

  // don't add media query if it's not needed:
  @if $px-values != $rem-values {
    // @media only all {
    #{$property}: $rem-values;
    // }
  }
}
